"use client";
import { useState, useEffect, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { useAuth } from '@/hooks/useAuth';
import { PageTransition, LoadingSpinner } from '@/components';

function LoginForm() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [message, setMessage] = useState<string | null>(null);
  const router = useRouter();
  const searchParams = useSearchParams();
  const { login, user } = useAuth();

  // URL„Éë„É©„É°„Éº„Çø„Åã„Çâ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæó
  useEffect(() => {
    const verified = searchParams.get('verified');
    if (verified === 'true') {
      setMessage('„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅÆÁ¢∫Ë™ç„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
    }
  }, [searchParams]);

  // „É≠„Ç∞„Ç§„É≥ÊàêÂäüÂæå„ÅÆ„É™„ÉÄ„Ç§„É¨„ÇØ„Éà
  useEffect(() => {
    if (user) {
      router.replace('/dashboard');
    }
  }, [user, router]);

  // „É°„Éº„É´„É≠„Ç∞„Ç§„É≥
  const handleSignIn = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setMessage(null);

    // Âü∫Êú¨ÁöÑ„Å™„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
    if (!email || !password) {
      setError('„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      setLoading(false);
      return;
    }

    try {
      const result = await login(email, password);
      
      if (result.success) {
        setMessage(result.message);
        // „É≠„Ç∞„Ç§„É≥ÊàêÂäüÊôÇ„ÅØÂç≥Â∫ß„Å´„É™„ÉÄ„Ç§„É¨„ÇØ„Éà
        setTimeout(() => {
          router.replace('/dashboard');
        }, 1000);
      } else {
        setError(result.message);
      }
    } catch (error: any) {
      console.error('Login error:', error);
      setError('„É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ');
    } finally {
      setLoading(false);
    }
  };

  return (
    <main className="min-h-screen bg-gray-50">
      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <div className="bg-white border-b border-gray-200">
        <div className="px-4 py-3">
          <div className="flex items-center">
            <button
              onClick={() => router.back()}
              className="p-2 text-gray-600 hover:text-gray-900 transition-colors"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            <h1 className="text-lg font-bold text-gray-900 ml-2">„É≠„Ç∞„Ç§„É≥</h1>
          </div>
        </div>
      </div>

      {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
      <div className="px-4 py-6">
        <div className="max-w-sm mx-auto">
          {/* „Ç¢„Ç§„Ç≥„É≥ */}
          <div className="text-center mb-6">
            <div className="text-6xl mb-4">üèì</div>
            <h2 className="text-xl font-bold text-gray-900 mb-2">Cromin Note</h2>
            <p className="text-gray-600">„Ç¢„Ç´„Ç¶„É≥„Éà„Å´„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
          </div>

          {/* „Éï„Ç©„Éº„É† */}
          <form onSubmit={handleSignIn} className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ
              </label>
              <input
                type="email"
                id="email"
                placeholder="example@email.com"
                value={email}
                onChange={e => setEmail(e.target.value)}
                className="w-full border border-gray-300 rounded-lg px-4 py-3 text-base focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
                disabled={loading}
              />
            </div>

            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                „Éë„Çπ„ÉØ„Éº„Éâ
              </label>
              <input
                type="password"
                id="password"
                placeholder="„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ"
                value={password}
                onChange={e => setPassword(e.target.value)}
                className="w-full border border-gray-300 rounded-lg px-4 py-3 text-base focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
                disabled={loading}
              />
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-blue-600 text-white py-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? (
                <div className="flex items-center justify-center">
                  <LoadingSpinner size="sm" />
                  <span className="ml-2">„É≠„Ç∞„Ç§„É≥‰∏≠...</span>
                </div>
              ) : (
                '„É≠„Ç∞„Ç§„É≥'
              )}
            </button>
          </form>

          {/* „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏ */}
          {error && (
            <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
              <div className="flex items-center gap-2 text-red-600 text-sm">
                <svg className="w-4 h-4 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
                {error}
              </div>
            </div>
          )}

          {/* ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏ */}
          {message && (
            <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-lg">
              <div className="flex items-center gap-2 text-green-600 text-sm">
                <svg className="w-4 h-4 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
                {message}
              </div>
            </div>
          )}

          {/* „É™„É≥„ÇØ */}
          <div className="mt-6 space-y-3 text-center">
            <div className="text-sm text-gray-600">
              „Ç¢„Ç´„Ç¶„É≥„Éà„Çí„ÅäÊåÅ„Å°„Åß„Å™„ÅÑÊñπ„ÅØ
              <Link href="/auth/signup" className="text-blue-600 hover:text-blue-700 font-medium ml-1">
                Êñ∞Ë¶è‰ºöÂì°ÁôªÈå≤
              </Link>
            </div>
          </div>
        </div>
      </div>
    </main>
  );
}

export default function LoginPage() {
  return (
    <PageTransition>
      <Suspense fallback={<LoadingSpinner size="lg" className="min-h-screen" />}>
        <LoginForm />
      </Suspense>
    </PageTransition>
  );
} 